{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/components/app-install-prompt/app-install-prompt.component.ts","./src/app/components/app-install-prompt/app-install-prompt.component.html","./src/app/components/categoty/category-dialog/category-dialog.component.ts","./src/app/components/categoty/category-dialog/category-dialog.component.html","./src/app/components/categoty/category-list/category-list.component.ts","./src/app/components/categoty/category-list/category-list.component.html","./src/app/components/categoty/category.service.ts","./src/app/components/confirmation-dialog/confirmation-dialog.component.ts","./src/app/components/confirmation-dialog/confirmation-dialog.component.html","./src/app/components/confirmation-dialog/confirmation-service.service.ts","./src/app/components/fish/fish-dialog/fish-dialog.component.ts","./src/app/components/fish/fish-dialog/fish-dialog.component.html","./src/app/components/fish/fish-list/fish-list.component.ts","./src/app/components/fish/fish-list/fish-list.component.html","./src/app/components/fish/fish.service.ts","./src/app/components/home/home.component.ts","./src/app/components/home/home.component.html","./src/app/components/loading-indicator/loading-indicator.component.ts","./src/app/components/loading-indicator/loading-indicator.component.html","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/components/logout/logout.component.ts","./src/app/components/logout/logout.component.html","./src/app/components/password-request/password-request.component.ts","./src/app/components/password-request/password-request.component.html","./src/app/components/password-reset/password-reset.component.ts","./src/app/components/password-reset/password-reset.component.html","./src/app/components/products/products.component.ts","./src/app/components/products/products.component.html","./src/app/components/sidebar-layout/sidebar-layout.component.ts","./src/app/components/sidebar-layout/sidebar-layout.component.html","./src/app/guards/auth.guard.ts","./src/app/interceptors/auth.interceptor.ts","./src/app/services/auth.service.ts","./src/app/services/global-error-handler.service.ts","./src/app/services/loading.service.ts","./src/app/services/products.service.ts","./src/app/services/pwa.service.ts","./src/app/services/search-table.service.ts","./src/app/services/snackbar.service.ts","./src/environments/environment.development.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { HomeComponent } from \"./components/home/home.component\";\nimport { LoginComponent } from \"./components/login/login.component\";\nimport { LogoutComponent } from \"./components/logout/logout.component\";\nimport { ProductsComponent } from \"./components/products/products.component\";\nimport { AuthGuard } from \"./guards/auth.guard\";\nimport { PasswordRequestComponent } from \"./components/password-request/password-request.component\";\nimport { PasswordResetComponent } from \"./components/password-reset/password-reset.component\";\nimport { SidebarLayoutComponent } from \"./components/sidebar-layout/sidebar-layout.component\";\nimport { FishListComponent } from \"./components/fish/fish-list/fish-list.component\";\nimport { CategoryListComponent } from \"./components/categoty/category-list/category-list.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: SidebarLayoutComponent,\n    children: [\n      {\n        path: \"home\",\n        component: HomeComponent,\n        title: \"Home\",\n        canActivate: [AuthGuard],\n      },\n      { path: \"login\", component: LoginComponent, title: \"Login\" },\n      { path: \"logout\", component: LogoutComponent, title: \"Logout\" },\n      {\n        path: \"password-request\",\n        component: PasswordRequestComponent,\n        title: \"Password Request\",\n      },\n      {\n        path: \"password-reset/:token\",\n        component: PasswordResetComponent,\n        title: \"Password Reset\",\n      },\n      {\n        path: \"products\",\n        component: ProductsComponent,\n        title: \"Products\",\n        canActivate: [AuthGuard],\n      },\n      {\n        path: \"fish\",\n        component: FishListComponent,\n        title: \"Fish example\",\n        canActivate: [AuthGuard],\n      },\n      {\n        path: \"category\",\n        component: CategoryListComponent,\n        title: \"Category example\",\n        canActivate: [AuthGuard],\n      },\n\n      { path: \"**\", redirectTo: \"home\" }, // Wildcard route to handle unmatched paths, redirect to log  in\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  isDevMode,\n  OnInit,\n} from \"@angular/core\";\nimport { RouterOutlet } from \"@angular/router\";\nimport { CommonModule } from \"@angular/common\";\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { environment } from \"src/environments/environment\";\nimport { Meta, Title } from \"@angular/platform-browser\";\nimport { SwUpdate } from \"@angular/service-worker\";\nimport { LoadingIndicatorComponent } from \"./components/loading-indicator/loading-indicator.component\";\n\n@Component({\n  standalone: true,\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n  imports: [\n    CommonModule,\n    MatToolbarModule,\n    MatIconModule,\n    RouterOutlet,\n    LoadingIndicatorComponent,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit {\n  isDevMode: boolean = isDevMode();\n  apiUrl = environment.apiUrl;\n  showWarning = false;\n\n  //isOrderForm: boolean = false;\n\n  constructor(\n    private title: Title,\n    private meta: Meta,\n    private swUpdate: SwUpdate,\n  ) {\n    // Check that UAT is not using the prod backend\n    if (this.isDevMode && this.apiUrl.includes(\"prod\")) {\n      this.showWarning = true;\n      alert(\"WARNING: Angular is in Dev mode but connected to production !!!\");\n    }\n  }\n\n  ngOnInit(): void {\n    this.title.setTitle(\"Pacific Fresh Fish Company App\");\n    this.meta.addTags([\n      {\n        name: \"description\",\n        content:\n          \"Pacific Fresh Fish Company application created by lb-advisors\",\n      },\n      { name: \"keywords\", content: \"PFF, lb-advisors, Allintel\" },\n      { name: \"robots\", content: \"index, follow\" },\n    ]);\n\n    this.checkForUpdate();\n  }\n\n  private checkForUpdate() {\n    if (this.swUpdate.isEnabled) {\n      this.swUpdate\n        .checkForUpdate()\n        .then((isUpdateAvailable) => {\n          if (isUpdateAvailable) {\n            const confirmUpdate = confirm(\n              \"A new version is available. Do you want to load it?\",\n            );\n            if (confirmUpdate) {\n              this.swUpdate.activateUpdate().then(() => {\n                window.location.reload();\n              });\n            }\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error while checking for updates:\", error);\n        });\n    }\n  }\n}\n","<main>\n  <app-loading-indicator></app-loading-indicator>\n  <router-outlet></router-outlet>\n</main>\n\n<!-- Footer -->\n<footer class=\"mat-drawer-container\">\n  <div class=\"container\">\n    <div class=\"text-align-center\">\n      © 2024 - Pacific Fresh Fish Company\n      <div *ngIf=\"isDevMode\" class=\"dev-mode\">UAT ENVIRONMENT</div>\n      <div *ngIf=\"isDevMode\" class=\"dev-mode\">{{ apiUrl }}</div>\n    </div>\n  </div>\n</footer>\n","import { Platform } from \"@angular/cdk/platform\";\nimport { CommonModule } from \"@angular/common\";\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { PwaService } from \"src/app/services/pwa.service\";\nimport { SnackbarService } from \"src/app/services/snackbar.service\";\nimport { MatButton } from \"@angular/material/button\";\n\n@Component({\n  standalone: true,\n  selector: \"app-install-prompt\",\n  imports: [CommonModule, MatButton],\n  templateUrl: \"./app-install-prompt.component.html\",\n  styleUrls: [\"./app-install-prompt.component.css\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppInstallPromptComponent implements OnInit, OnDestroy {\n  beforeInstallPromptHandler?: (event: BeforeInstallPromptEvent) => void;\n  deferredPrompt: BeforeInstallPromptEvent | null = null;\n  isPwa$: Observable<boolean>;\n  isIosButNotPwa: boolean;\n  isPwa: boolean;\n  plat: boolean;\n\n  constructor(\n    private pwaService: PwaService,\n    private snackbarService: SnackbarService,\n    public platform: Platform,\n  ) {\n    this.isPwa$ = this.pwaService.isPwa$;\n    this.isPwa = this.isRunningAsPWA();\n    this.isIosButNotPwa = this.isIOS() && !this.isRunningAsPWA();\n    this.plat = this.isIOS();\n  }\n\n  ngOnInit() {\n    this.beforeInstallPromptHandler = (event: BeforeInstallPromptEvent) => {\n      // Prevent the mini-infobar from appearing\n      event.preventDefault();\n      this.deferredPrompt = event;\n      this.pwaService.updateValue(true);\n    };\n\n    window.addEventListener(\n      \"beforeinstallprompt\",\n      this.beforeInstallPromptHandler as EventListener,\n    );\n  }\n\n  ngOnDestroy() {\n    window.removeEventListener(\n      \"beforeinstallprompt\",\n      this.beforeInstallPromptHandler as EventListener,\n    );\n    this.pwaService.updateValue(false);\n  }\n\n  promptInstall() {\n    if (this.deferredPrompt) {\n      this.deferredPrompt.prompt(); // Show the install prompt\n      this.deferredPrompt.userChoice.then(() => {\n        this.deferredPrompt = null;\n        this.pwaService.updateValue(false);\n      });\n    }\n  }\n\n  showIosInstructions() {\n    this.snackbarService.showInfo(\n      \"To install this web app on your device, tap the Menu button and then 'Add to Home Screen' button\",\n      20000,\n    );\n  }\n\n  private isIOS(): boolean {\n    const userAgent = window.navigator.userAgent.toLowerCase();\n    return /iphone|ipad|ipod|mac/.test(userAgent) || this.platform.IOS;\n  }\n\n  private isRunningAsPWA(): boolean {\n    const isStandalone = window.matchMedia(\n      \"(display-mode: standalone)\",\n    ).matches;\n    const isIOSStandalone = (navigator as any).standalone === true;\n    const isFullscreen = window.innerHeight === screen.height;\n\n    return isStandalone || isIOSStandalone || isFullscreen;\n  }\n}\n\ninterface BeforeInstallPromptEvent extends Event {\n  readonly platforms: string[];\n  userChoice: Promise<{ outcome: \"accepted\" | \"dismissed\"; platform: string }>;\n\n  prompt(): Promise<void>;\n}\n","@if ( (isPwa$ | async) === true) {\n<div class=\"install-banner\">\n  <button mat-raised-button color=\"primary\" (click)=\"promptInstall()\">\n    Install as an Application\n  </button>\n</div>\n} @else if (isIosButNotPwa) {\n<div class=\"install-banner\">\n  <button mat-raised-button color=\"primary\" (click)=\"showIosInstructions()\">\n    Install as an Application\n  </button>\n</div>\n}","// src/app/components/category-dialog/category-dialog.component.ts\n\nimport { Component, inject, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogModule,\n  MatDialogRef,\n} from \"@angular/material/dialog\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport {\n  FormBuilder,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from \"@angular/forms\";\nimport { Category } from \"../../../models/category.model\";\n\ninterface DialogData {\n  mode: \"add\" | \"edit\";\n  category?: Category;\n}\n\n@Component({\n  selector: \"app-category-dialog\",\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    ReactiveFormsModule,\n  ],\n  templateUrl: \"./category-dialog.component.html\",\n  styleUrls: [\"./category-dialog.component.css\"],\n})\nexport class CategoryDialogComponent implements OnInit {\n  categoryForm!: FormGroup;\n  dialogTitle = \"\";\n  protected data: DialogData = inject(MAT_DIALOG_DATA);\n  private dialogRef = inject(MatDialogRef<CategoryDialogComponent>);\n  private fb = inject(FormBuilder);\n\n  ngOnInit(): void {\n    this.initForm();\n    this.dialogTitle =\n      this.data.mode === \"add\" ? \"Add New Category\" : \"Edit Category\";\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n\n  onSubmit(): void {\n    if (this.categoryForm.valid) {\n      this.dialogRef.close({\n        id: this.data.category?.id,\n        ...this.categoryForm.getRawValue(),\n      });\n    }\n  }\n\n  private initForm(): void {\n    this.categoryForm = this.fb.group({\n      categoryName: [\n        this.data.category?.categoryName || \"\",\n        [Validators.required],\n      ],\n    });\n  }\n}\n","<!-- src/app/components/category-dialog/category-dialog.component.html -->\n\n<h2 mat-dialog-title>{{ dialogTitle }}</h2>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"categoryForm\">\n  <mat-dialog-content>\n    <mat-form-field appearance=\"fill\" class=\"full-width\">\n      <mat-label>Name</mat-label>\n      <input formControlName=\"categoryName\" matInput placeholder=\"Enter category name\">\n      <mat-error *ngIf=\"categoryForm.get('categoryName')?.hasError('required')\">\n        Name is required\n      </mat-error>\n    </mat-form-field>\n  </mat-dialog-content>\n\n  <mat-dialog-actions align=\"end\">\n    <button (click)=\"onCancel()\" mat-button type=\"button\">Cancel</button>\n    <button [disabled]=\"categoryForm.invalid\" color=\"primary\" mat-raised-button type=\"submit\">\n      {{ data.mode === 'add' ? 'Add' : 'Update' }}\n    </button>\n  </mat-dialog-actions>\n</form>\n","// src/app/components/category-list/category-list.component.ts\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  effect,\n  inject,\n  OnDestroy,\n  OnInit,\n  signal,\n  ViewChild,\n} from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { MatTableDataSource, MatTableModule } from \"@angular/material/table\";\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatDialog, MatDialogModule } from \"@angular/material/dialog\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { SelectionModel } from \"@angular/cdk/collections\";\nimport { ConfirmationService } from \"../../confirmation-dialog/confirmation-service.service\";\nimport {\n  Category,\n  CategoryPatchDto,\n  CategoryPostDto,\n} from \"../../../models/category.model\";\nimport { CategoryDialogComponent } from \"../category-dialog/category-dialog.component\";\nimport { MatSort, MatSortModule } from \"@angular/material/sort\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { CategoryService } from \"../category.service\";\nimport { SnackbarService } from \"../../../services/snackbar.service\";\nimport { SearchTableService } from \"../../../services/search-table.service\";\n\n@Component({\n  selector: \"app-category-list\",\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatDialogModule,\n    MatTooltipModule,\n    MatSortModule,\n  ],\n  templateUrl: \"./category-list.component.html\",\n  styleUrls: [\"./category-list.component.css\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryListComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChild(MatSort) sort!: MatSort;\n  dataSource = new MatTableDataSource<Category>([]);\n  displayedColumns: string[] = [\"select\", \"id\", \"name\", \"actions\"];\n  selection = new SelectionModel<Category>(true, []);\n  searchQuery = signal<string>(\"\");\n\n  // Entity type identifier for search service\n  private readonly ENTITY_TYPE = \"category\";\n  private destroy$ = new Subject<void>();\n\n  private categoryService = inject(CategoryService);\n  private dialog = inject(MatDialog);\n  private snackBarService = inject(SnackbarService);\n  private confirmationService = inject(ConfirmationService);\n  private searchTableService = inject(SearchTableService);\n\n  constructor() {\n    // Effect to update the table data whenever the categoryes signal changes\n    effect(() => {\n      this.updateTable(this.categoryService.categoryes());\n    });\n  }\n\n  ngOnInit(): void {\n    // No need to call loadCategoryes() as the service loads data on construction\n    this.configureDataSource();\n    this.setupSearch();\n  }\n\n  ngAfterViewInit() {\n    // Connect sort after view initializes and configure custom sorting\n    this.configureSort();\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.searchTableService.destroySearch(this.ENTITY_TYPE);\n  }\n\n  /**\n   * Configure case-insensitive sorting for the table\n   */\n  configureSort(): void {\n    this.dataSource.sort = this.sort;\n    this.dataSource.sortingDataAccessor = (\n      data: Category,\n      sortHeaderId: string,\n    ) => {\n      const value = data[sortHeaderId as keyof Category];\n\n      // Handle different data types for sorting\n      if (typeof value === \"string\") {\n        return value.toLowerCase(); // Case-insensitive string sorting\n      } else {\n        return value; // Default for numbers and other types\n      }\n    };\n  }\n\n  /**\n   * Set up the search functionality\n   */\n  setupSearch(): void {\n    this.searchTableService\n      .getSearchObservable(this.ENTITY_TYPE)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((searchValue) => {\n        this.searchQuery.set(searchValue);\n        this.dataSource.filter = searchValue.trim().toLowerCase();\n      });\n  }\n\n  /**\n   * Configure the data source with custom filter predicate\n   */\n  configureDataSource(): void {\n    // Define custom filter logic that searches across all fields\n    this.dataSource.filterPredicate = (category: Category, filter: string) => {\n      const searchStr = filter.toLowerCase();\n      return (\n        category.id.toString().includes(searchStr) ||\n        category.categoryName.toLowerCase().includes(searchStr)\n      );\n    };\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected(): boolean {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows && numRows > 0;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  toggleAllRows(): void {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n\n  openAddDialog(): void {\n    const dialogRef = this.dialog.open(CategoryDialogComponent, {\n      width: \"400px\",\n      data: { mode: \"add\" },\n    });\n\n    dialogRef\n      .afterClosed()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((result: CategoryPostDto) => {\n        if (result) {\n          this.categoryService.createCategory(result);\n          this.snackBarService.showSuccess(\"Category added successfully\");\n        }\n      });\n  }\n\n  openEditDialog(category: Category): void {\n    const dialogRef = this.dialog.open(CategoryDialogComponent, {\n      width: \"400px\",\n      data: { mode: \"edit\", category },\n    });\n\n    dialogRef\n      .afterClosed()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((result) => {\n        if (result) {\n          const update: CategoryPatchDto = {\n            categoryName: result.categoryName,\n          };\n\n          this.categoryService.updateCategory(category.id, update);\n          this.snackBarService.showSuccess(\"Category updated successfully\");\n        }\n      });\n  }\n\n  deleteCategory(category: Category): void {\n    this.confirmationService\n      .confirmDeletion(`category \"${category.categoryName}\"`)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((confirmed) => {\n        if (confirmed) {\n          this.categoryService.deleteCategory(category.id);\n          this.snackBarService.showSuccess(\"Category deleted successfully\");\n        }\n      });\n  }\n\n  deleteSelectedCategories(): void {\n    const selectedIds = this.selection.selected.map((category) => category.id);\n\n    if (selectedIds.length === 0) {\n      this.snackBarService.showError(\"No category selected\");\n      return;\n    }\n\n    this.confirmationService\n      .confirmBulkDeletion(selectedIds.length, \"category\")\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((confirmed) => {\n        if (confirmed) {\n          this.categoryService.deleteManyCategory(selectedIds);\n          this.selection.clear();\n          this.snackBarService.showSuccess(\n            \"Selected category deleted successfully\",\n          );\n        }\n      });\n  }\n\n  onSearch(event: Event): void {\n    const value = (event.target as HTMLInputElement)?.value;\n    this.searchTableService.updateSearchQuery(this.ENTITY_TYPE, value);\n  }\n\n  // Function to update table data\n  private updateTable(categories: Category[]): void {\n    this.dataSource.data = categories;\n\n    // Reapply current filter\n    if (this.searchQuery()) {\n      this.dataSource.filter = this.searchQuery().trim().toLowerCase();\n    }\n\n    // Maintain sort state after data changes\n    if (this.sort && this.dataSource.sort !== this.sort) {\n      this.configureSort();\n    }\n  }\n}\n","<!-- src/app/components/Category-list/category-list.component.html -->\n\n<div class=\"Category-container\">\n  <mat-toolbar color=\"primary\">\n    <span>Category Management</span>\n\n    <span class=\"toolbar-spacer\"></span>\n\n    <div class=\"search-container margin-right\">\n      <mat-icon class=\"search-icon\">search</mat-icon>\n      <input (input)=\"onSearch($event)\" [value]=\"searchQuery()\" placeholder=\"Search...\" type=\"text\">\n    </div>\n\n    <button (click)=\"openAddDialog()\" class=\"margin-right\" color=\"accent\" mat-mini-fab matTooltip=\"Add new Category\">\n      <mat-icon>add</mat-icon>\n    </button>\n\n    <button (click)=\"deleteSelectedCategories()\" [disabled]=\"selection.selected.length === 0\"\n            color=\"accent\"\n            mat-raised-button>\n      <mat-icon>delete</mat-icon>\n      Delete Selected ({{ selection.selected.length }})\n    </button>\n  </mat-toolbar>\n\n\n  <div class=\"mat-elevation-z8 table-container\">\n    <table [dataSource]=\"dataSource\" mat-table matSort matSortActive=\"categoryName\" matSortDirection=\"asc\">\n\n      <!-- Checkbox Column -->\n      <ng-container matColumnDef=\"select\">\n        <th *matHeaderCellDef mat-header-cell>\n          <mat-checkbox (change)=\"$event ? toggleAllRows() : null\"\n                        [checked]=\"selection.hasValue() && isAllSelected()\"\n                        [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\n          </mat-checkbox>\n        </th>\n        <td *matCellDef=\"let row\" mat-cell>\n          <mat-checkbox (change)=\"$event ? selection.toggle(row) : null\"\n                        (click)=\"$event.stopPropagation()\"\n                        [checked]=\"selection.isSelected(row)\">\n          </mat-checkbox>\n        </td>\n      </ng-container>\n\n      <!-- ID Column -->\n      <ng-container matColumnDef=\"id\">\n        <th *matHeaderCellDef mat-header-cell mat-sort-header> ID</th>\n        <td *matCellDef=\"let category\" mat-cell> {{ category.id }}</td>\n      </ng-container>\n\n      <!-- Name Column -->\n      <ng-container matColumnDef=\"name\">\n        <th *matHeaderCellDef mat-header-cell mat-sort-header=\"categoryName\"> Name</th>\n        <td *matCellDef=\"let category\" mat-cell> {{ category.categoryName }}</td>\n      </ng-container>\n\n      <!-- Actions Column -->\n      <ng-container matColumnDef=\"actions\">\n        <th *matHeaderCellDef mat-header-cell> Actions</th>\n        <td *matCellDef=\"let category\" mat-cell>\n          <button (click)=\"openEditDialog(category)\" color=\"primary\" mat-icon-button matTooltip=\"Edit\">\n            <mat-icon>edit</mat-icon>\n          </button>\n          <button (click)=\"deleteCategory(category)\" color=\"warn\" mat-icon-button matTooltip=\"Delete\">\n            <mat-icon>delete</mat-icon>\n          </button>\n        </td>\n      </ng-container>\n\n      <tr *matHeaderRowDef=\"displayedColumns\" mat-header-row></tr>\n      <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row></tr>\n\n      <!-- No Results Row -->\n      <tr *ngIf=\"dataSource.filteredData.length === 0\" class=\"mat-row\">\n        <td class=\"mat-cell\" colspan=\"5\">\n          No results matching \"{{ searchQuery() }}\"\n        </td>\n      </tr>\n    </table>\n\n    <div *ngIf=\"dataSource.data.length === 0\" class=\"no-data\">\n      <p>No Category data available</p>\n    </div>\n  </div>\n</div>\n","// src/app/services/category.service.ts\n\nimport { computed, inject, Injectable, signal } from \"@angular/core\";\nimport {\n  Category,\n  CategoryPatchDto,\n  CategoryPostDto,\n} from \"../../models/category.model\";\nimport { environment } from \"../../../environments/environment\";\nimport { HttpClient } from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class CategoryService {\n  private http = inject(HttpClient);\n  private baseUrl = `${environment.apiUrl}/category`;\n\n  // State signals\n  private categoryList = signal<Category[]>([]);\n\n  // Exposed computed signals\n  public categoryes = computed(() => this.categoryList());\n\n  constructor() {\n    // Load category data immediately when service is injected\n    this.loadAllCategory();\n  }\n\n  /**\n   * Load all category from the API and update the signal\n   */\n  loadAllCategory(): void {\n    this.http.get<Category[]>(this.baseUrl).subscribe({\n      next: (data) => this.categoryList.set(data),\n    });\n  }\n\n  /**\n   * Get a single category by ID\n   */\n  getCategoryById(id: number): Category | undefined {\n    return this.categoryList().find((category) => category.id === id);\n  }\n\n  /**\n   * Create a new category\n   */\n  createCategory(category: CategoryPostDto): void {\n    this.http.post<Category>(this.baseUrl, category).subscribe({\n      next: (newCategory) => {\n        // Update the signal with the new category\n        this.categoryList.update((list) => [...list, newCategory]);\n      },\n    });\n  }\n\n  /**\n   * Update an existing category\n   */\n  updateCategory(id: number, categoryUpdate: CategoryPatchDto): void {\n    this.http\n      .patch<Category>(`${this.baseUrl}/${id}`, categoryUpdate)\n      .subscribe({\n        next: (updatedCategory) => {\n          // Update the specific category in the list\n          this.categoryList.update((list) =>\n            list.map((category) =>\n              category.id === id ? updatedCategory : category,\n            ),\n          );\n        },\n      });\n  }\n\n  /**\n   * Delete a category by ID\n   */\n  deleteCategory(id: number): void {\n    this.http.delete<void>(`${this.baseUrl}/${id}`).subscribe({\n      next: () => {\n        // Remove the deleted category from the list\n        this.categoryList.update((list) =>\n          list.filter((category) => category.id !== id),\n        );\n      },\n    });\n  }\n\n  /**\n   * Delete multiple category by IDs\n   */\n  deleteManyCategory(ids: number[]): void {\n    if (ids.length === 0) return;\n    this.http\n      .delete<void>(`${this.baseUrl}/bulk`, { body: { ids } })\n      .subscribe({\n        next: () => {\n          // Remove all deleted category from the list\n          this.categoryList.update((list) =>\n            list.filter((category) => !ids.includes(category.id)),\n          );\n        },\n      });\n  }\n}\n","// src/app/components/confirmation-dialog/confirmation-dialog.component.ts\n\nimport { ChangeDetectionStrategy, Component, inject } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogModule,\n  MatDialogRef,\n} from \"@angular/material/dialog\";\nimport { MatButtonModule } from \"@angular/material/button\";\n\nexport interface ConfirmationDialogData {\n  title: string;\n  message: string;\n  confirmButtonText?: string;\n  cancelButtonText?: string;\n  confirmButtonColor?: \"primary\" | \"accent\" | \"warn\";\n}\n\n@Component({\n  selector: \"app-confirmation-dialog\",\n  standalone: true,\n  imports: [CommonModule, MatDialogModule, MatButtonModule],\n  templateUrl: \"./confirmation-dialog.component.html\",\n  styleUrls: [\"./confirmation-dialog.component.css\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ConfirmationDialogComponent {\n  data: ConfirmationDialogData = inject(MAT_DIALOG_DATA);\n  private dialogRef = inject(MatDialogRef<ConfirmationDialogComponent>);\n\n  constructor() {\n    // Set default values if not provided\n    this.data.confirmButtonText = this.data.confirmButtonText || \"Confirm\";\n    this.data.cancelButtonText = this.data.cancelButtonText || \"Cancel\";\n    this.data.confirmButtonColor = this.data.confirmButtonColor || \"warn\";\n  }\n\n  onConfirm(): void {\n    this.dialogRef.close(true);\n  }\n\n  onCancel(): void {\n    this.dialogRef.close(false);\n  }\n}\n","<!-- src/app/components/confirmation-dialog/confirmation-dialog.component.html -->\n\n<h2 mat-dialog-title>{{ data.title }}</h2>\n\n<mat-dialog-content>\n  <p [innerHTML]=\"data.message\"></p>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n  <button (click)=\"onCancel()\" mat-button>\n    {{ data.cancelButtonText }}\n  </button>\n  <button\n    (click)=\"onConfirm()\"\n    [color]=\"data.confirmButtonColor\"\n    mat-raised-button>\n    {{ data.confirmButtonText }}\n  </button>\n</mat-dialog-actions>\n","// src/app/services/confirmation.service.ts\n\nimport { inject, Injectable } from \"@angular/core\";\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\nimport { Observable } from \"rxjs\";\nimport {\n  ConfirmationDialogComponent,\n  ConfirmationDialogData,\n} from \"./confirmation-dialog.component\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ConfirmationService {\n  private dialog = inject(MatDialog);\n\n  /**\n   * Opens a confirmation dialog\n   * @param data Configuration data for the dialog\n   * @returns An Observable that resolves to true if confirmed, false otherwise\n   */\n  confirm(data: ConfirmationDialogData): Observable<boolean | undefined> {\n    const dialogRef: MatDialogRef<ConfirmationDialogComponent, boolean> =\n      this.dialog.open(ConfirmationDialogComponent, {\n        width: \"400px\",\n        disableClose: true,\n        data,\n      });\n\n    return dialogRef.afterClosed();\n  }\n\n  /**\n   * Convenience method for delete confirmations\n   * @param itemName The name of the item being deleted\n   * @returns An Observable that resolves to true if confirmed, false otherwise\n   */\n  confirmDeletion(\n    itemName: string = \"this item\",\n  ): Observable<boolean | undefined> {\n    return this.confirm({\n      title: \"Confirm Deletion\",\n      message: `Are you sure you want to delete ${itemName}? This action cannot be undone.`,\n      confirmButtonText: \"Delete\",\n      confirmButtonColor: \"warn\",\n    });\n  }\n\n  /**\n   * Convenience method for bulk delete confirmations\n   * @param count The number of items being deleted\n   * @param itemType The type of items being deleted (e.g., 'fish', 'records')\n   * @returns An Observable that resolves to true if confirmed, false otherwise\n   */\n  confirmBulkDeletion(\n    count: number,\n    itemType: string = \"items\",\n  ): Observable<boolean | undefined> {\n    return this.confirm({\n      title: \"Confirm Bulk Deletion\",\n      message: `Are you sure you want to delete ${count} ${itemType}? This action cannot be undone.`,\n      confirmButtonText: \"Delete All\",\n      confirmButtonColor: \"warn\",\n    });\n  }\n}\n","// src/app/components/fish-dialog/fish-dialog.component.ts\n\nimport { Component, inject, OnInit } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogModule,\n  MatDialogRef,\n} from \"@angular/material/dialog\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport {\n  FormBuilder,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from \"@angular/forms\";\nimport { Fish } from \"../../../models/fish.model\";\n\ninterface DialogData {\n  mode: \"add\" | \"edit\";\n  fish?: Fish;\n}\n\n@Component({\n  selector: \"app-fish-dialog\",\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    ReactiveFormsModule,\n  ],\n  templateUrl: \"./fish-dialog.component.html\",\n  styleUrls: [\"./fish-dialog.component.css\"],\n})\nexport class FishDialogComponent implements OnInit {\n  fishForm!: FormGroup;\n  dialogTitle = \"\";\n  protected data: DialogData = inject(MAT_DIALOG_DATA);\n  private dialogRef = inject(MatDialogRef<FishDialogComponent>);\n  private fb = inject(FormBuilder);\n\n  ngOnInit(): void {\n    this.initForm();\n    this.dialogTitle = this.data.mode === \"add\" ? \"Add New Fish\" : \"Edit Fish\";\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n\n  onSubmit(): void {\n    if (this.fishForm.valid) {\n      this.dialogRef.close({\n        id: this.data.fish?.id,\n        ...this.fishForm.getRawValue(),\n      });\n    }\n  }\n\n  private initForm(): void {\n    this.fishForm = this.fb.group({\n      name: [\n        {\n          value: this.data.fish?.name || \"\",\n          disabled: this.data.mode === \"edit\",\n        },\n        [Validators.required],\n      ],\n      description: [this.data.fish?.description || \"\", [Validators.required]],\n    });\n  }\n}\n","<!-- src/app/components/fish-dialog/fish-dialog.component.html -->\n\n<h2 mat-dialog-title>{{ dialogTitle }}</h2>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"fishForm\">\n  <mat-dialog-content>\n    <mat-form-field appearance=\"fill\" class=\"full-width\">\n      <mat-label>Name</mat-label>\n      <input formControlName=\"name\" matInput placeholder=\"Enter fish name\">\n      <mat-error *ngIf=\"fishForm.get('name')?.hasError('required')\">\n        Name is required\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\" class=\"full-width\">\n      <mat-label>Description</mat-label>\n      <textarea formControlName=\"description\" matInput placeholder=\"Enter fish description\" rows=\"4\"></textarea>\n      <mat-error *ngIf=\"fishForm.get('description')?.hasError('required')\">\n        Description is required\n      </mat-error>\n    </mat-form-field>\n  </mat-dialog-content>\n\n  <mat-dialog-actions align=\"end\">\n    <button (click)=\"onCancel()\" mat-button type=\"button\">Cancel</button>\n    <button [disabled]=\"fishForm.invalid\" color=\"primary\" mat-raised-button type=\"submit\">\n      {{ data.mode === 'add' ? 'Add' : 'Update' }}\n    </button>\n  </mat-dialog-actions>\n</form>\n","// src/app/components/fish-list/fish-list.component.ts\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  effect,\n  inject,\n  OnDestroy,\n  OnInit,\n  signal,\n  ViewChild,\n} from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { MatTableDataSource, MatTableModule } from \"@angular/material/table\";\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatDialog, MatDialogModule } from \"@angular/material/dialog\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { SelectionModel } from \"@angular/cdk/collections\";\nimport { ConfirmationService } from \"../../confirmation-dialog/confirmation-service.service\";\nimport { Fish, FishPatchDto, FishPostDto } from \"../../../models/fish.model\";\nimport { FishDialogComponent } from \"../fish-dialog/fish-dialog.component\";\nimport { MatSort, MatSortModule } from \"@angular/material/sort\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { FishService } from \"../fish.service\";\nimport { SnackbarService } from \"../../../services/snackbar.service\";\nimport { SearchTableService } from \"../../../services/search-table.service\";\n\n@Component({\n  selector: \"app-fish-list\",\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatDialogModule,\n    MatTooltipModule,\n    MatSortModule,\n  ],\n  templateUrl: \"./fish-list.component.html\",\n  styleUrls: [\"./fish-list.component.css\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FishListComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChild(MatSort) sort!: MatSort;\n  dataSource = new MatTableDataSource<Fish>([]);\n  displayedColumns: string[] = [\n    \"select\",\n    \"id\",\n    \"name\",\n    \"description\",\n    \"actions\",\n  ];\n  selection = new SelectionModel<Fish>(true, []);\n  searchQuery = signal<string>(\"\");\n\n  // Entity type identifier for search service\n  private readonly ENTITY_TYPE = \"fish\";\n  private destroy$ = new Subject<void>();\n\n  private fishService = inject(FishService);\n  private dialog = inject(MatDialog);\n  private snackBarService = inject(SnackbarService);\n  private confirmationService = inject(ConfirmationService);\n  private searchTableService = inject(SearchTableService);\n\n  constructor() {\n    // Effect to update the table data whenever the fishes signal changes\n    effect(() => {\n      this.updateTable(this.fishService.fishes());\n    });\n  }\n\n  ngOnInit(): void {\n    // No need to call loadFishes() as the service loads data on construction\n    this.configureDataSource();\n    this.setupSearch();\n  }\n\n  ngAfterViewInit() {\n    // Connect sort after view initializes and configure custom sorting\n    this.configureSort();\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.searchTableService.destroySearch(this.ENTITY_TYPE);\n  }\n\n  /**\n   * Configure case-insensitive sorting for the table\n   */\n  configureSort(): void {\n    this.dataSource.sort = this.sort;\n    this.dataSource.sortingDataAccessor = (\n      data: Fish,\n      sortHeaderId: string,\n    ) => {\n      const value = data[sortHeaderId as keyof Fish];\n\n      // Handle different data types for sorting\n      if (typeof value === \"string\") {\n        return value.toLowerCase(); // Case-insensitive string sorting\n      } else {\n        return value; // Default for numbers and other types\n      }\n    };\n  }\n\n  /**\n   * Set up the search functionality\n   */\n  setupSearch(): void {\n    this.searchTableService\n      .getSearchObservable(this.ENTITY_TYPE)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((searchValue) => {\n        this.searchQuery.set(searchValue);\n        this.dataSource.filter = searchValue.trim().toLowerCase();\n      });\n  }\n\n  /**\n   * Configure the data source with custom filter predicate\n   */\n  configureDataSource(): void {\n    // Define custom filter logic that searches across all fields\n    this.dataSource.filterPredicate = (fish: Fish, filter: string) => {\n      const searchStr = filter.toLowerCase();\n      return (\n        fish.id.toString().includes(searchStr) ||\n        fish.name.toLowerCase().includes(searchStr) ||\n        fish.description.toLowerCase().includes(searchStr)\n      );\n    };\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected(): boolean {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows && numRows > 0;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  toggleAllRows(): void {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n\n  openAddDialog(): void {\n    const dialogRef = this.dialog.open(FishDialogComponent, {\n      width: \"400px\",\n      data: { mode: \"add\" },\n    });\n\n    dialogRef\n      .afterClosed()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((result: FishPostDto) => {\n        if (result) {\n          this.fishService.createFish(result);\n          this.snackBarService.showSuccess(\"Fish added successfully\");\n        }\n      });\n  }\n\n  openEditDialog(fish: Fish): void {\n    const dialogRef = this.dialog.open(FishDialogComponent, {\n      width: \"400px\",\n      data: { mode: \"edit\", fish },\n    });\n\n    dialogRef\n      .afterClosed()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((result) => {\n        if (result) {\n          const update: FishPatchDto = {\n            description: result.description,\n          };\n\n          this.fishService.updateFish(fish.id, update);\n          this.snackBarService.showSuccess(\"Fish updated successfully\");\n        }\n      });\n  }\n\n  deleteFish(fish: Fish): void {\n    this.confirmationService\n      .confirmDeletion(`fish \"${fish.name}\"`)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((confirmed) => {\n        if (confirmed) {\n          this.fishService.deleteFish(fish.id);\n          this.snackBarService.showSuccess(\"Fish deleted successfully\");\n        }\n      });\n  }\n\n  deleteSelectedFishes(): void {\n    const selectedIds = this.selection.selected.map((fish) => fish.id);\n\n    if (selectedIds.length === 0) {\n      this.snackBarService.showError(\"No fish selected\");\n      return;\n    }\n\n    this.confirmationService\n      .confirmBulkDeletion(selectedIds.length, \"fish\")\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((confirmed) => {\n        if (confirmed) {\n          this.fishService.deleteManyFish(selectedIds);\n          this.selection.clear();\n          this.snackBarService.showSuccess(\n            \"Selected fish deleted successfully\",\n          );\n        }\n      });\n  }\n\n  onSearch(event: Event): void {\n    const value = (event.target as HTMLInputElement)?.value;\n    this.searchTableService.updateSearchQuery(this.ENTITY_TYPE, value);\n  }\n\n  // Function to update table data\n  private updateTable(fishes: Fish[]): void {\n    this.dataSource.data = fishes;\n\n    // Reapply current filter\n    if (this.searchQuery()) {\n      this.dataSource.filter = this.searchQuery().trim().toLowerCase();\n    }\n\n    // Maintain sort state after data changes\n    if (this.sort && this.dataSource.sort !== this.sort) {\n      this.configureSort();\n    }\n  }\n}\n","<!-- src/app/components/fish-list/fish-list.component.html -->\n\n<div class=\"fish-container\">\n  <mat-toolbar color=\"primary\">\n    <span>Fish Management</span>\n\n    <span class=\"toolbar-spacer\"></span>\n\n    <div class=\"search-container margin-right\">\n      <mat-icon class=\"search-icon\">search</mat-icon>\n      <input (input)=\"onSearch($event)\" [value]=\"searchQuery()\" placeholder=\"Search...\" type=\"text\">\n    </div>\n\n    <button (click)=\"openAddDialog()\" class=\"margin-right\" color=\"accent\" mat-mini-fab matTooltip=\"Add new fish\">\n      <mat-icon>add</mat-icon>\n    </button>\n\n    <button (click)=\"deleteSelectedFishes()\" [disabled]=\"selection.selected.length === 0\"\n            color=\"accent\"\n            mat-raised-button>\n      <mat-icon>delete</mat-icon>\n      Delete Selected ({{ selection.selected.length }})\n    </button>\n  </mat-toolbar>\n\n\n  <div class=\"mat-elevation-z8 table-container\">\n    <table [dataSource]=\"dataSource\" mat-table matSort matSortActive=\"name\" matSortDirection=\"asc\">\n\n      <!-- Checkbox Column -->\n      <ng-container matColumnDef=\"select\">\n        <th *matHeaderCellDef mat-header-cell>\n          <mat-checkbox (change)=\"$event ? toggleAllRows() : null\"\n                        [checked]=\"selection.hasValue() && isAllSelected()\"\n                        [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\n          </mat-checkbox>\n        </th>\n        <td *matCellDef=\"let row\" mat-cell>\n          <mat-checkbox (change)=\"$event ? selection.toggle(row) : null\"\n                        (click)=\"$event.stopPropagation()\"\n                        [checked]=\"selection.isSelected(row)\">\n          </mat-checkbox>\n        </td>\n      </ng-container>\n\n      <!-- ID Column -->\n      <ng-container matColumnDef=\"id\">\n        <th *matHeaderCellDef arrowPosition=\"before\" mat-header-cell mat-sort-header> ID</th>\n        <td *matCellDef=\"let fish\" mat-cell> {{ fish.id }}</td>\n      </ng-container>\n\n      <!-- Name Column -->\n      <ng-container matColumnDef=\"name\">\n        <th *matHeaderCellDef arrowPosition=\"before\" mat-header-cell mat-sort-header> Name</th>\n        <td *matCellDef=\"let fish\" mat-cell> {{ fish.name }}</td>\n      </ng-container>\n\n      <!-- Description Column -->\n      <ng-container matColumnDef=\"description\">\n        <th *matHeaderCellDef arrowPosition=\"before\" mat-header-cell mat-sort-header> Description</th>\n        <td *matCellDef=\"let fish\" mat-cell> {{ fish.description }}</td>\n      </ng-container>\n\n      <!-- Actions Column -->\n      <ng-container matColumnDef=\"actions\">\n        <th *matHeaderCellDef mat-header-cell> Actions</th>\n        <td *matCellDef=\"let fish\" mat-cell>\n          <button (click)=\"openEditDialog(fish)\" color=\"primary\" mat-icon-button matTooltip=\"Edit\">\n            <mat-icon>edit</mat-icon>\n          </button>\n          <button (click)=\"deleteFish(fish)\" color=\"warn\" mat-icon-button matTooltip=\"Delete\">\n            <mat-icon>delete</mat-icon>\n          </button>\n        </td>\n      </ng-container>\n\n      <tr *matHeaderRowDef=\"displayedColumns\" mat-header-row></tr>\n      <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row></tr>\n\n      <!-- No Results Row -->\n      <tr *ngIf=\"dataSource.filteredData.length === 0\" class=\"mat-row\">\n        <td class=\"mat-cell\" colspan=\"5\">\n          No results matching \"{{ searchQuery() }}\"\n        </td>\n      </tr>\n    </table>\n\n    <div *ngIf=\"dataSource.data.length === 0\" class=\"no-data\">\n      <p>No fish data available</p>\n    </div>\n  </div>\n</div>\n","// src/app/services/fish.service.ts\n\nimport { computed, inject, Injectable, signal } from \"@angular/core\";\nimport { Fish, FishPatchDto, FishPostDto } from \"../../models/fish.model\";\nimport { environment } from \"../../../environments/environment\";\nimport { HttpClient } from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class FishService {\n  private http = inject(HttpClient);\n  private baseUrl = `${environment.apiUrl}/fish`;\n\n  // State signals\n  private fishList = signal<Fish[]>([]);\n\n  // Exposed computed signals\n  public fishes = computed(() => this.fishList());\n\n  constructor() {\n    // Load fish data immediately when service is injected\n    this.loadAllFish();\n  }\n\n  /**\n   * Load all fish from the API and update the signal\n   */\n  loadAllFish(): void {\n    this.http.get<Fish[]>(this.baseUrl).subscribe({\n      next: (data) => this.fishList.set(data),\n    });\n  }\n\n  /**\n   * Get a single fish by ID\n   */\n  getFishById(id: number): Fish | undefined {\n    return this.fishList().find((fish) => fish.id === id);\n  }\n\n  /**\n   * Create a new fish\n   */\n  createFish(fish: FishPostDto): void {\n    this.http.post<Fish>(this.baseUrl, fish).subscribe({\n      next: (newFish) => {\n        // Update the signal with the new fish\n        this.fishList.update((list) => [...list, newFish]);\n      },\n    });\n  }\n\n  /**\n   * Update an existing fish\n   */\n  updateFish(id: number, fishUpdate: FishPatchDto): void {\n    this.http.patch<Fish>(`${this.baseUrl}/${id}`, fishUpdate).subscribe({\n      next: (updatedFish) => {\n        // Update the specific fish in the list\n        this.fishList.update((list) =>\n          list.map((fish) => (fish.id === id ? updatedFish : fish)),\n        );\n      },\n    });\n  }\n\n  /**\n   * Delete a fish by ID\n   */\n  deleteFish(id: number): void {\n    this.http.delete<void>(`${this.baseUrl}/${id}`).subscribe({\n      next: () => {\n        // Remove the deleted fish from the list\n        this.fishList.update((list) => list.filter((fish) => fish.id !== id));\n      },\n    });\n  }\n\n  /**\n   * Delete multiple fish by IDs\n   */\n  deleteManyFish(ids: number[]): void {\n    if (ids.length === 0) return;\n    this.http\n      .delete<void>(`${this.baseUrl}/bulk`, { body: { ids } })\n      .subscribe({\n        next: () => {\n          // Remove all deleted fish from the list\n          this.fishList.update((list) =>\n            list.filter((fish) => !ids.includes(fish.id)),\n          );\n        },\n      });\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { CommonModule, NgOptimizedImage } from \"@angular/common\";\nimport { AuthService } from \"src/app/services/auth.service\";\n\n@Component({\n  standalone: true,\n  selector: \"app-home\",\n  templateUrl: \"./home.component.html\",\n  styleUrls: [\"./home.component.css\"],\n  imports: [CommonModule, NgOptimizedImage],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HomeComponent implements OnInit {\n  username!: string | null;\n\n  constructor(\n    private router: Router,\n    private authService: AuthService,\n  ) {}\n\n  ngOnInit(): void {\n    this.username = this.authService.getFullname();\n  }\n\n  navigateTo(page: string): void {\n    void this.router.navigate([`/${page}`]);\n  }\n\n  logout(): void {\n    this.authService.logout();\n  }\n}\n","<div class=\"page container\">\n  <div class=\"button-container\">\n    <button (click)=\"navigateTo('products')\" class=\"nav-button\">Products</button>\n    <button (click)=\"navigateTo('test')\" class=\"nav-button\">Just a Test</button>\n    <button (click)=\"logout()\" class=\"nav-button logout-button\">Logout</button>\n  </div>\n\n  <div class=\"button-container user-info\">\n    Welcome, {{ username }}!\n  </div>\n\n  <div class=\"image-grid\">\n    <img alt=\"Logo Image\" class=\"grid-image image2\" height=\"425\" ngSrc=\"assets/logo.png\" width=\"1235\">\n  </div>\n</div>\n","// src/app/components/loading-indicator/loading-indicator.component.ts\n\nimport { Component, inject } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\nimport { LoadingService } from \"../../services/loading.service\";\n\n@Component({\n  selector: \"app-loading-indicator\",\n  standalone: true,\n  imports: [CommonModule, MatProgressSpinnerModule],\n  templateUrl: \"./loading-indicator.component.html\",\n  styleUrls: [\"./loading-indicator.component.css\"],\n})\nexport class LoadingIndicatorComponent {\n  loadingService = inject(LoadingService);\n}\n","<div *ngIf=\"loadingService.loading()\" class=\"loading-overlay\">\n  <div class=\"spinner-container\">\n    <mat-spinner diameter=\"40\"></mat-spinner>\n    <span>Loading...</span>\n  </div>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n} from \"@angular/core\";\nimport { Router, RouterModule } from \"@angular/router\";\nimport {\n  FormBuilder,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from \"@angular/forms\";\nimport { AuthService } from \"src/app/services/auth.service\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { CommonModule, NgOptimizedImage } from \"@angular/common\";\nimport { catchError, throwError } from \"rxjs\";\nimport { LoginResponse } from \"src/app/models/login-response.model \";\nimport { AppInstallPromptComponent } from \"../app-install-prompt/app-install-prompt.component\";\n\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.css\"],\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    NgOptimizedImage,\n    AppInstallPromptComponent,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n  loading = false;\n  errorMessage: string | null = null;\n\n  constructor(\n    private router: Router,\n    private cdr: ChangeDetectorRef,\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n  ) {\n    this.loginForm = this.formBuilder.group({\n      username: [\"\", [Validators.required]],\n      password: [\"\", Validators.required],\n    });\n  }\n\n  onLogin() {\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.errorMessage = null;\n    const { username, password } = this.loginForm.value;\n    this.authService\n      .login(username, password)\n      .pipe(\n        catchError((error) => {\n          this.errorMessage = `Login failed. ${error.status === 401 ? \"Please check your username and password\" : error.error?.message || \"Please check your username and password\"}.`;\n          this.loading = false;\n          this.cdr.markForCheck();\n          return throwError(() => error);\n        }),\n      )\n      .subscribe({\n        next: ({ firstName, lastName, token }: LoginResponse) => {\n          this.authService.saveFullnameAndToken(\n            `${firstName ?? \"\"} ${lastName ?? \"\"}`.trim(),\n            token,\n          );\n          void this.router.navigate([\"/products\"]);\n        },\n      });\n  }\n}\n","<div class=\"container\">\n  <div class=\"login-container\">\n    <div class=\"logo-container\">\n      <img alt=\"Company Logo\" class=\"logo\" height=\"425\" ngSrc=\"assets/logo.png\" width=\"1235\">\n    </div>\n\n    <h1>Login</h1>\n    <form (ngSubmit)=\"onLogin()\" [formGroup]=\"loginForm\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Username</mat-label>\n        <input autocomplete=\"username\" formControlName=\"username\" matInput placeholder=\"Enter your username\"\n               type=\"text\">\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Password</mat-label>\n        <input autocomplete=\"current-password\" formControlName=\"password\" matInput placeholder=\"Enter your password\"\n               type=\"password\">\n      </mat-form-field>\n\n      <a [routerLink]=\"['/password-request']\">\n        Forgot password?\n      </a>\n\n      <button [disabled]=\"loading || loginForm.invalid\" color=\"primary\" mat-raised-button type=\"submit\">\n        <span *ngIf=\"!loading\">Login</span>\n        <span *ngIf=\"loading\">Logging in...</span>\n      </button>\n    </form>\n\n    <div *ngIf=\"errorMessage\" class=\"error-message\">\n      {{ errorMessage }}\n    </div>\n  </div>\n</div>\n\n<app-install-prompt></app-install-prompt>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-logout',\n  templateUrl: './logout.component.html',\n  styleUrls: ['./logout.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n})\nexport class LogoutComponent {\n  constructor(private authService: AuthService) {\n    this.authService.logout();\n  }\n}\n","<br /><br /><br />\n\n<h1 style=\"padding-left: 200px;\">You have been logged out.</h1>\n\n<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n} from \"@angular/core\";\nimport { Router, RouterModule } from \"@angular/router\";\nimport {\n  FormBuilder,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from \"@angular/forms\";\nimport { AuthService } from \"src/app/services/auth.service\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { CommonModule, NgOptimizedImage } from \"@angular/common\";\nimport { SnackbarService } from \"src/app/services/snackbar.service\";\n\n@Component({\n  selector: \"app-password-request\",\n  templateUrl: \"./password-request.component.html\",\n  styleUrls: [\"./password-request.component.css\"],\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    NgOptimizedImage,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PasswordRequestComponent {\n  passwordRequestForm: FormGroup;\n\n  constructor(\n    private router: Router,\n    private cdr: ChangeDetectorRef,\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private snackbarService: SnackbarService,\n  ) {\n    this.passwordRequestForm = this.formBuilder.group({\n      username: [\"\", [Validators.required, Validators.email]],\n    });\n  }\n\n  onSubmit() {\n    const { username } = this.passwordRequestForm.value;\n\n    this.authService.passwordRequest(username).subscribe({\n      next: () => {\n        this.snackbarService.showInfo(\n          `An email has been sent to ${username} to reset your password`,\n        );\n        this.router.navigate([\"/login\"]);\n      },\n    });\n  }\n}\n","<div class=\"container\">\n  <div class=\"login-container\">\n\n    <div class=\"logo-container\">\n      <a [routerLink]=\"['/home']\">\n        <img alt=\"Company Logo\" class=\"logo\" height=\"425\" ngSrc=\"assets/logo.png\" width=\"1235\">\n      </a>\n    </div>\n\n    <h1>New password request</h1>\n    <form (ngSubmit)=\"onSubmit()\" [formGroup]=\"passwordRequestForm\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Username</mat-label>\n        <input autocomplete=\"username\" formControlName=\"username\" matInput placeholder=\"Enter your username\"\n               type=\"text\">\n      </mat-form-field>\n\n      <button [disabled]=\"passwordRequestForm.invalid\" color=\"primary\" mat-raised-button type=\"submit\">\n        <span>Submit password request</span>\n      </button>\n    </form>\n  </div>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnInit,\n} from \"@angular/core\";\nimport {\n  ActivatedRoute,\n  ParamMap,\n  Router,\n  RouterModule,\n} from \"@angular/router\";\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ReactiveFormsModule,\n  ValidationErrors,\n  Validators,\n} from \"@angular/forms\";\nimport { AuthService } from \"src/app/services/auth.service\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { CommonModule, NgOptimizedImage } from \"@angular/common\";\nimport { SnackbarService } from \"src/app/services/snackbar.service\";\n\n@Component({\n  selector: \"app-password-reset\",\n  templateUrl: \"./password-reset.component.html\",\n  styleUrls: [\"./password-reset.component.css\"],\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    NgOptimizedImage,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PasswordResetComponent implements OnInit {\n  passwordResetForm: FormGroup;\n  token: string = \"\";\n  mismatchedPassword: boolean = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private cdr: ChangeDetectorRef,\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private snackbarService: SnackbarService,\n  ) {\n    this.passwordResetForm = this.formBuilder.group({\n      password: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(5),\n          this.specialCharacterValidator,\n        ],\n      ],\n      confirmPassword: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(5),\n          this.specialCharacterValidator,\n        ],\n      ],\n    });\n  }\n\n  ngOnInit(): void {\n    this.passwordResetForm\n      .get(\"confirmPassword\")\n      ?.valueChanges.subscribe(() => {\n        this.mismatchedPassword = false;\n      });\n\n    this.route.paramMap.subscribe((params: ParamMap) => {\n      this.token = params.get(\"token\") || \"\";\n      if (!this.token) {\n        // no JWT found\n        this.router.navigate([\"/login\"]);\n      }\n    });\n  }\n\n  onSubmit() {\n    const { password, confirmPassword } = this.passwordResetForm.value;\n\n    if (password !== confirmPassword) {\n      this.mismatchedPassword = true;\n      return;\n    }\n\n    this.authService.passwordReset(password, this.token).subscribe({\n      next: () => {\n        this.snackbarService.showSuccess(\"Your password has been reset\");\n        this.router.navigate([\"/login\"]); // Navigate to /products on success\n      },\n    });\n  }\n\n  specialCharacterValidator(control: AbstractControl): ValidationErrors | null {\n    const value = control.value;\n    // Regular expression for special characters\n    const hasSpecialCharacter = /[!@#$%^&*(),.?\":{}|<>]/.test(value);\n    return hasSpecialCharacter ? null : { noSpecialCharacter: true };\n  }\n}\n","<div class=\"container\">\n  <div class=\"login-container\">\n\n    <div class=\"logo-container\">\n      <a [routerLink]=\"['/home']\">\n        <img alt=\"Company Logo\" class=\"logo\" height=\"425\" ngSrc=\"assets/logo.png\" width=\"1235\">\n      </a>\n    </div>\n\n    <h1>New password</h1>\n    <form (ngSubmit)=\"onSubmit()\" [formGroup]=\"passwordResetForm\">\n\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Password</mat-label>\n        <input autocomplete=\"current-password\" formControlName=\"password\" matInput placeholder=\"Enter your password\"\n               type=\"password\">\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Re-enter your password</mat-label>\n        <input autocomplete=\"current-password\" formControlName=\"confirmPassword\" matInput\n               placeholder=\"Enter your password\"\n               type=\"password\">\n      </mat-form-field>\n\n      <div\n        *ngIf=\"passwordResetForm.get('password') && passwordResetForm.get('password')?.errors?.['minlength']\"\n        class=\"error\">\n        Your password needs to have at least 5 characters.\n      </div>\n\n      <div\n        *ngIf=\"passwordResetForm.get('password') && passwordResetForm.get('password')?.errors?.['noSpecialCharacter']\"\n        class=\"error\">\n        Your password needs to contain at least one special character: {{ '[!@#$%^&*(),.?\":{}|<>]' }}\n      </div>\n\n      <div *ngIf=\"mismatchedPassword\" class=\"error\">\n        The 2 entries do not match.\n      </div>\n\n      <button [disabled]=\"passwordResetForm.invalid\" color=\"primary\" mat-raised-button type=\"submit\">\n        <span>Submit new password</span>\n      </button>\n    </form>\n  </div>\n</div>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ProductService } from '../../services/products.service';\nimport { InventoryItem } from 'src/app/models/product.model';\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  standalone: true,\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css'],\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, RouterModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductsComponent implements OnInit {\n  page = 0;\n  size = 50;\n  searchTerm = '';\n  showRelevantItems = false;\n  showSixtySales = false;\n  showWoh = false;\n  showYield = false;\n  showWithImages = false; // New filter for rows with images\n\n  // Filter dropdowns\n  originFilter: string = '';\n  packSizeFilter: string | number = '';\n  buyerFilter: string | number = '';\n\n  // Min CompCost property\n  minCompCost: number = 0;\n\n  // Form control\n  minCompCostControl = new FormControl('');\n\n  // Unique dropdown options\n  uniqueOrigins: string[] = [];\n  uniquePackSizes: (string | number)[] = [];\n  uniqueBuyers: (string | number)[] = [];\n\n  private searchSubject = new Subject<string>();\n  private searchSubscription!: Subscription;\n\n  private inventoryItemsSubject = new BehaviorSubject<InventoryItem[]>([]);\n  inventoryItems$ = this.inventoryItemsSubject.asObservable();\n\n  constructor(private productService: ProductService) {}\n\n  ngOnInit(): void {}\n}\n","Product Test\n","import { Component, computed, inject, signal, ViewChild } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { RouterModule, RouterOutlet } from \"@angular/router\";\nimport { MatSidenav, MatSidenavModule } from \"@angular/material/sidenav\";\nimport { MatListModule } from \"@angular/material/list\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatExpansionModule } from \"@angular/material/expansion\";\nimport { MatDividerModule } from \"@angular/material/divider\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { AuthService } from \"../../services/auth.service\";\n\n@Component({\n  selector: \"app-sidebar-layout\",\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule,\n    RouterOutlet,\n    MatSidenavModule,\n    MatListModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatExpansionModule,\n    MatDividerModule,\n    MatTooltipModule,\n  ],\n  templateUrl: \"sidebar-layout.component.html\",\n  styleUrl: \"sidebar-layout.component.css\",\n})\nexport class SidebarLayoutComponent {\n  @ViewChild(\"drawer\") drawer!: MatSidenav;\n\n  authService = inject(AuthService);\n  // Signal to track sidebar state\n  sidebarOpened = signal(true);\n  firstName = computed(() => this.authService.firstName());\n\n  // Toggle sidebar open/closed\n  toggleSidebar(): void {\n    this.sidebarOpened.update((state) => !state);\n  }\n}\n","<div class=\"sidebar-container\">\n  <mat-toolbar color=\"primary\">\n    <button (click)=\"toggleSidebar()\" [matTooltip]=\"sidebarOpened() ? 'Hide menu' : 'Show menu'\" mat-icon-button>\n      <mat-icon>{{ sidebarOpened() ? 'menu_open' : 'menu' }}</mat-icon>\n    </button>\n    <span class=\"toolbar-title\">PFFC Application</span>\n    <span *ngIf=\"firstName() as name\" class=\"logged-in\">Logged in as {{ name }}</span>\n\n  </mat-toolbar>\n\n  <mat-sidenav-container class=\"sidenav-container\">\n    <mat-sidenav #drawer [opened]=\"sidebarOpened()\" class=\"sidenav\" mode=\"side\">\n      <div class=\"sidenav-header\">\n        <h2>Menu</h2>\n      </div>\n\n      <mat-divider></mat-divider>\n\n      <!-- Regular menu items -->\n      <mat-nav-list>\n        <a mat-list-item routerLink=\"/dashboard\" routerLinkActive=\"active-link\">\n          <mat-icon matListItemIcon>dashboard</mat-icon>\n          <span matListItemTitle>Home</span>\n        </a>\n\n        <a mat-list-item routerLink=\"/category\" routerLinkActive=\"active-link\">\n          <mat-icon matListItemIcon>business</mat-icon>\n          <span matListItemTitle>Category (example)</span>\n        </a>\n      </mat-nav-list>\n\n      <mat-divider></mat-divider>\n\n      <!-- Expandable menu items with submenus -->\n      <mat-accordion>\n        <mat-expansion-panel class=\"mat-elevation-z0\">\n          <mat-expansion-panel-header>\n            <mat-panel-title>\n              <div class=\"panel-title-content\">\n                <mat-icon>settings</mat-icon>\n                <span>Administration</span>\n              </div>\n            </mat-panel-title>\n          </mat-expansion-panel-header>\n\n          <mat-nav-list>\n            <a mat-list-item routerLink=\"/admin/users\" routerLinkActive=\"active-link\">\n              <mat-icon matListItemIcon>people</mat-icon>\n              <span matListItemTitle>Users</span>\n            </a>\n            <a mat-list-item routerLink=\"/admin/roles\" routerLinkActive=\"active-link\">\n              <mat-icon matListItemIcon>verified_user</mat-icon>\n              <span matListItemTitle>Roles</span>\n            </a>\n            <a mat-list-item routerLink=\"/admin/permissions\" routerLinkActive=\"active-link\">\n              <mat-icon matListItemIcon>security</mat-icon>\n              <span matListItemTitle>Permissions</span>\n            </a>\n          </mat-nav-list>\n        </mat-expansion-panel>\n\n        <mat-expansion-panel class=\"mat-elevation-z0\">\n          <mat-expansion-panel-header>\n            <mat-panel-title>\n              <div class=\"panel-title-content\">\n                <mat-icon>insert_chart</mat-icon>\n                <span>Reports</span>\n              </div>\n            </mat-panel-title>\n          </mat-expansion-panel-header>\n\n          <mat-nav-list>\n            <a mat-list-item routerLink=\"/reports/summary\" routerLinkActive=\"active-link\">\n              <mat-icon matListItemIcon>summarize</mat-icon>\n              <span matListItemTitle>Summary</span>\n            </a>\n            <a mat-list-item routerLink=\"/reports/analytics\" routerLinkActive=\"active-link\">\n              <mat-icon matListItemIcon>analytics</mat-icon>\n              <span matListItemTitle>Analytics</span>\n            </a>\n            <a mat-list-item routerLink=\"/reports/export\" routerLinkActive=\"active-link\">\n              <mat-icon matListItemIcon>download</mat-icon>\n              <span matListItemTitle>Export</span>\n            </a>\n          </mat-nav-list>\n        </mat-expansion-panel>\n      </mat-accordion>\n\n      <mat-divider></mat-divider>\n\n      <!-- Bottom menu items -->\n      <mat-nav-list>\n        <a mat-list-item routerLink=\"/profile\" routerLinkActive=\"active-link\">\n          <mat-icon matListItemIcon>account_circle</mat-icon>\n          <span matListItemTitle>Profile</span>\n        </a>\n        <a mat-list-item routerLink=\"/help\" routerLinkActive=\"active-link\">\n          <mat-icon matListItemIcon>help</mat-icon>\n          <span matListItemTitle>Help</span>\n        </a>\n        <a mat-list-item routerLink=\"/logout\" routerLinkActive=\"active-link\">\n          <mat-icon matListItemIcon>exit_to_app</mat-icon>\n          <span matListItemTitle>Logout</span>\n        </a>\n      </mat-nav-list>\n    </mat-sidenav>\n\n    <mat-sidenav-content class=\"sidenav-content\">\n      <div class=\"content-container\">\n        <router-outlet></router-outlet>\n      </div>\n    </mat-sidenav-content>\n  </mat-sidenav-container>\n</div>\n","import { Injectable } from \"@angular/core\";\nimport { CanActivate, Router } from \"@angular/router\";\nimport { AuthService } from \"../services/auth.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n  ) {}\n\n  canActivate(): boolean {\n    if (this.authService.isLoggedIn()) {\n      return true;\n    } else {\n      // Redirect to login if not authenticated\n      void this.router.navigate([\"/login\"]);\n      return false;\n    }\n  }\n}\n","import { inject, Injectable } from \"@angular/core\";\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from \"@angular/common/http\";\nimport { finalize, Observable } from \"rxjs\";\nimport { AuthService } from \"../services/auth.service\";\nimport { LoadingService } from \"../services/loading.service\";\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept<T>(\n    req: HttpRequest<T>,\n    next: HttpHandler,\n  ): Observable<HttpEvent<T>> {\n    // Get the token from the AuthService (or other storage like localStorage)\n    const token = this.authService.getToken(); // Make sure to implement getToken() method\n    const loadingService = inject(LoadingService);\n\n    if (token) {\n      // Clone the request and add the authorization header\n      const clonedRequest = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      loadingService.setLoading(true);\n      return next.handle(clonedRequest).pipe(\n        finalize(() => {\n          // Stop loading when the request completes (success or error)\n          loadingService.setLoading(false);\n        }),\n      );\n    }\n\n    // If there's no token, continue with the original request\n    return next.handle(req);\n  }\n}\n","import { Injectable, signal } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { environment } from \"src/environments/environment\";\nimport { LoginResponse } from \"../models/login-response.model \";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AuthService {\n  private tokenKey = \"authToken\";\n  private fullnameKey = \"fullname\";\n  private _firstName = signal<string | null>(null);\n  firstName = this._firstName.asReadonly();\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n  ) {}\n\n  login(username: string, password: string): Observable<LoginResponse> {\n    return this.http.post<LoginResponse>(\n      `${environment.apiUrl}/public/auth/login`,\n      {\n        username,\n        password,\n      },\n    );\n  }\n\n  passwordRequest(username: string): Observable<unknown> {\n    return this.http.post<unknown>(\n      `${environment.apiUrl}/public/auth/password-request`,\n      { username },\n    );\n  }\n\n  passwordReset(password: string, token: string): Observable<unknown> {\n    return this.http.post<unknown>(\n      `${environment.apiUrl}/public/auth/password-reset`,\n      { password, token },\n    );\n  }\n\n  saveFullnameAndToken(fullname: string, token: string): void {\n    localStorage.setItem(this.tokenKey, token);\n    localStorage.setItem(this.fullnameKey, fullname);\n  }\n\n  // Retrieve the token (from sessionStorage first, then fallback to localStorage)\n  getToken(): string | null {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  getFullname(): string | null {\n    return localStorage.getItem(this.fullnameKey);\n  }\n\n  // Check if the user is logged in by verifying if a token exists\n  isLoggedIn(): boolean {\n    const token = localStorage.getItem(this.tokenKey);\n    this._firstName.set(this.getFullname());\n    return !!token;\n  }\n\n  // Optional: method to log out\n  logout(): void {\n    localStorage.removeItem(this.tokenKey);\n    localStorage.removeItem(this.fullnameKey);\n    this._firstName.set(null);\n    void this.router.navigate([\"/login\"]);\n  }\n\n  // Check if token exists and is not expired\n  /*\n  isTokenValid(url?: string): boolean {\n    // Skip token validation if the URL matches an excluded path\n    if (url && this.isExcludedPath(url)) {\n      console.log('URL is excluded from authentication, skipping token validation:', url);\n      return true;\n    }\n\n    const token = this.getToken();\n    if (!token) {\n      console.warn('No token found');\n      return false;\n    }\n\n    const payload = this.decodeToken(token);\n    if (!payload || !payload.exp) {\n      console.warn('Invalid token payload');\n      return false;\n    }\n\n    const expiryTime = payload.exp * 1000; // Convert to milliseconds\n    const currentTime = Date.now();\n    const isValid = currentTime < expiryTime;\n    console.log('Token validity:', isValid); // Debug: Log token validity\n    return isValid;\n  }\n\n  // Decode the token to get its payload\n  private decodeToken(token: string): any | null {\n    try {\n      const payloadPart = token.split('.')[1];\n      const decodedPayload = atob(payloadPart);\n      const parsedPayload = JSON.parse(decodedPayload);\n      console.log('Decoded token payload:', parsedPayload); // Debug: Log decoded payload\n      return parsedPayload;\n    } catch (error) {\n      console.error('Failed to decode token:', error);\n      return null;\n    }\n  }\n*/\n}\n","import { ErrorHandler, Injectable } from '@angular/core';\nimport { SnackbarService } from './snackbar.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GlobalErrorHandlerService implements ErrorHandler {\n  constructor(private snackBarService: SnackbarService, private router: Router, private authService: AuthService) {}\n\n  handleError(error: unknown) {\n    if (error instanceof HttpErrorResponse) {\n      // Check network connectivity\n      if (!navigator.onLine) {\n        this.snackBarService.showError('No internet connection');\n        return;\n      }\n\n      // Handle client-side errors\n      if (error.error instanceof ErrorEvent) {\n        this.snackBarService.showError(error.error.message);\n        return;\n      }\n\n      // Handle specific HTTP status codes\n      switch (error.status) {\n        case 401:\n          this.authService.logout();\n          this.snackBarService.showError('Unauthorized. Please enter your credentials.');\n          this.router.navigate(['/login']);\n          break;\n\n        case 403: {\n          this.authService.logout();\n          const errorMessage = error.error?.message || 'Try again.';\n          this.snackBarService.showError(`Access denied. ${errorMessage}.`);\n          break;\n        }\n        case 423: {\n          this.authService.logout();\n          const errorMessage = error.error?.message || 'Try again.';\n          this.snackBarService.showError(`Access denied. ${errorMessage}.`);\n          break;\n        }\n        case 404:\n          this.snackBarService.showError('Resource not found.');\n          break;\n\n        case 413:\n          this.snackBarService.showError('File too large.');\n          break;\n        case 500: {\n          const errorMessage = error.error?.message || 'Please try again later.';\n          this.snackBarService.showError(`Error: ${errorMessage}`);\n          break;\n        }\n        default: {\n          console.error('An error occurred:', error);\n          const errorMessage = error.error?.message || 'An unexpected error occurred.';\n          this.snackBarService.showError(`Error: ${errorMessage}`);\n        }\n      }\n\n      // Log the full error for debugging\n      console.error('Full error details:', {\n        status: error.status,\n        statusText: error.statusText,\n        url: error.url,\n        error: error.error,\n      });\n    } else {\n      // Handle client-side/non-HTTP errors\n      console.error('Client-side error:', error);\n      this.snackBarService.showError('An unexpected error occurred');\n    }\n  }\n}\n","// src/app/services/loading.service.ts\n\nimport { Injectable, signal } from \"@angular/core\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class LoadingService {\n  // Use a signal to track loading state\n  private _loading = signal(false);\n\n  // Expose a readonly version of the loading signal\n  public loading = this._loading.asReadonly();\n\n  /**\n   * Set the loading state\n   * @param isLoading Whether the application is loading\n   */\n  setLoading(isLoading: boolean): void {\n    this._loading.set(isLoading);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams, HttpEvent } from '@angular/common/http';\nimport { map, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { InventoryItem } from '../models/product.model';\nimport { AuthService } from './auth.service';\nimport { PaginatedResponse } from '../models/paginate-response.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n  private apiUrl = environment.apiUrl;\n\n  constructor(private http: HttpClient, private authService: AuthService) {}\n\n  /**\n   * Fetch products with pagination and search term\n   */\n  getProducts(page: number, size: number, searchTerm: string): Observable<InventoryItem[]> {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('search', searchTerm);\n\n    return this.http.get<PaginatedResponse<InventoryItem>>(`${this.apiUrl}/products`, { params }).pipe(map((response) => response.content));\n  }\n\n  /**\n   * Upload a photo for a specific product\n   */\n  uploadProductImage(productId: number, file: File): Observable<HttpEvent<InventoryItem>> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    return this.http.post<InventoryItem>(`${this.apiUrl}/products/${productId}/photos`, formData, {\n      reportProgress: true,\n      observe: 'events',\n    });\n  }\n\n  /**\n   * Delete a photo for a specific product\n   */\n  deleteProductPhoto(productId: number): Observable<void> {\n    const url = `${this.apiUrl}/products/${productId}/photos`; // Full API endpoint\n    return this.http.delete<void>(url); // Use DELETE HTTP method\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PwaService {\n  private isPwa = new BehaviorSubject<boolean>(false);\n  isPwa$ = this.isPwa.asObservable();\n\n  updateValue(isPwa: boolean): void {\n    this.isPwa.next(isPwa);\n  }\n}\n","// src/app/services/search.service.ts\n\nimport { Injectable } from \"@angular/core\";\nimport { Observable, Subject } from \"rxjs\";\nimport { debounceTime, distinctUntilChanged } from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SearchTableService {\n  private searchSubjects = new Map<string, Subject<string>>();\n\n  /**\n   * Gets or creates a search observable for a specific entity type\n   * @param entityType The entity type identifier (e.g., 'fish', 'user', etc.)\n   * @param debounceMs Debounce time in milliseconds (default: 300ms)\n   * @returns An observable that emits search query values\n   */\n  getSearchObservable(\n    entityType: string,\n    debounceMs = 300,\n  ): Observable<string> {\n    if (!this.searchSubjects.has(entityType)) {\n      this.searchSubjects.set(entityType, new Subject<string>());\n    }\n\n    return this.searchSubjects\n      .get(entityType)!\n      .pipe(debounceTime(debounceMs), distinctUntilChanged());\n  }\n\n  /**\n   * Updates the search query for a specific entity type\n   * @param entityType The entity type identifier\n   * @param query The search query string\n   */\n  updateSearchQuery(entityType: string, query: string): void {\n    if (!this.searchSubjects.has(entityType)) {\n      this.searchSubjects.set(entityType, new Subject<string>());\n    }\n\n    this.searchSubjects.get(entityType)!.next(query);\n  }\n\n  /**\n   * Clears search subject for an entity type\n   * @param entityType The entity type identifier\n   */\n  //clearSearch(entityType: string): void {\n  //  if (this.searchSubjects.has(entityType)) {\n  //    const subject = this.searchSubjects.get(entityType)!;\n  //    subject.next(\"\");\n  //  }\n  //}\n\n  /**\n   * Destroys the search subject for an entity type\n   * @param entityType The entity type identifier\n   */\n  destroySearch(entityType: string): void {\n    if (this.searchSubjects.has(entityType)) {\n      const subject = this.searchSubjects.get(entityType)!;\n      subject.complete();\n      this.searchSubjects.delete(entityType);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar, MatSnackBarHorizontalPosition, MatSnackBarRef, MatSnackBarVerticalPosition, TextOnlySnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SnackbarService {\n  private snackBarRef!: MatSnackBarRef<TextOnlySnackBar>;\n  private duration = 10000;\n  private verticalPosition: MatSnackBarVerticalPosition = 'bottom';\n  private horizontalPos: MatSnackBarHorizontalPosition = 'center';\n  private action = 'Hide';\n\n  // Define standard styles\n  private styles = {\n    error: 'error-snackbar',\n    success: 'success-snackbar',\n    warning: 'warning-snackbar',\n    info: 'info-snackbar',\n  };\n\n  constructor(private matSnackBar: MatSnackBar) {}\n\n  private showSnackBar(message: string, style?: 'error' | 'success' | 'warning' | 'info', duration: number = this.duration) {\n    // Close any existing snackbar\n    this.closeSnackBar();\n\n    // Get the appropriate style class\n    const panelClass = style ? this.styles[style] : undefined;\n\n    this.snackBarRef = this.matSnackBar.open(message, this.action, {\n      duration: duration,\n      verticalPosition: this.verticalPosition,\n      horizontalPosition: this.horizontalPos,\n      panelClass: panelClass,\n    });\n\n    this.snackBarRef.onAction().subscribe(() => {\n      this.closeSnackBar();\n    });\n\n    return this.snackBarRef;\n  }\n\n  // Convenience methods for different types of messages\n  showError(message: string, duration?: number) {\n    return this.showSnackBar(message, 'error', duration);\n  }\n\n  showSuccess(message: string, duration?: number) {\n    return this.showSnackBar(message, 'success', duration);\n  }\n\n  showWarning(message: string, duration?: number) {\n    return this.showSnackBar(message, 'warning', duration);\n  }\n\n  showInfo(message: string, duration?: number) {\n    return this.showSnackBar(message, 'info', duration);\n  }\n\n  closeSnackBar() {\n    if (this.snackBarRef) {\n      this.snackBarRef.dismiss();\n    }\n  }\n}\n","export const environment = {\n  production: false,\n  apiUrl: \"https://pffc-app-uat-latest.onrender.com/api\",\n};\n","import { AppComponent } from \"./app/app.component\";\nimport { MatSnackBarModule } from \"@angular/material/snack-bar\";\nimport { MatMenuModule } from \"@angular/material/menu\";\nimport { MatListModule } from \"@angular/material/list\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatSidenavModule } from \"@angular/material/sidenav\";\nimport { MatTableModule } from \"@angular/material/table\";\nimport { MatSlideToggleModule } from \"@angular/material/slide-toggle\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { provideAnimations } from \"@angular/platform-browser/animations\";\nimport { AppRoutingModule } from \"./app/app-routing.module\";\nimport { bootstrapApplication, BrowserModule } from \"@angular/platform-browser\";\nimport { GlobalErrorHandlerService } from \"./app/services/global-error-handler.service\";\nimport { ErrorHandler, importProvidersFrom, isDevMode } from \"@angular/core\";\nimport {\n  HTTP_INTERCEPTORS,\n  provideHttpClient,\n  withInterceptorsFromDi,\n} from \"@angular/common/http\";\nimport { RouterModule } from \"@angular/router\";\nimport { AuthInterceptor } from \"./app/interceptors/auth.interceptor\";\nimport { provideServiceWorker } from \"@angular/service-worker\";\nimport { MatSortModule } from \"@angular/material/sort\";\n\nbootstrapApplication(AppComponent, {\n  providers: [\n    importProvidersFrom(\n      BrowserModule,\n      AppRoutingModule,\n      RouterModule,\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      MatSlideToggleModule,\n      MatTableModule,\n      MatSidenavModule,\n      MatToolbarModule,\n      MatIconModule,\n      MatListModule,\n      MatMenuModule,\n      MatSnackBarModule,\n      MatSortModule,\n    ),\n    { provide: ErrorHandler, useClass: GlobalErrorHandlerService },\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n    provideHttpClient(withInterceptorsFromDi()),\n    provideAnimations(),\n    provideServiceWorker(\"ngsw-worker.js\", {\n      enabled: !isDevMode(),\n      registrationStrategy: \"registerWhenStable:30000\",\n    }),\n  ],\n}).catch((err) => console.error(err));\n"],"names":["RouterModule","HomeComponent","LoginComponent","LogoutComponent","ProductsComponent","AuthGuard","PasswordRequestComponent","PasswordResetComponent","SidebarLayoutComponent","FishListComponent","CategoryListComponent","routes","path","component","children","title","canActivate","redirectTo","AppRoutingModule","forRoot","imports","i1","exports","isDevMode","RouterOutlet","CommonModule","MatToolbarModule","MatIconModule","environment","LoadingIndicatorComponent","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r0","apiUrl","AppComponent","constructor","meta","swUpdate","showWarning","includes","alert","ngOnInit","setTitle","addTags","name","content","checkForUpdate","isEnabled","then","isUpdateAvailable","confirmUpdate","confirm","activateUpdate","window","location","reload","catch","error","console","ɵɵdirectiveInject","Title","Meta","i2","SwUpdate","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelement","ɵɵtemplate","AppComponent_div_7_Template","AppComponent_div_8_Template","ɵɵproperty","i3","NgIf","styles","changeDetection","MatButton","ɵɵlistener","AppInstallPromptComponent_Conditional_0_Template_button_click_1_listener","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","promptInstall","AppInstallPromptComponent_Conditional_2_Template_button_click_1_listener","_r3","showIosInstructions","AppInstallPromptComponent","pwaService","snackbarService","platform","deferredPrompt","isPwa$","isPwa","isRunningAsPWA","isIosButNotPwa","isIOS","plat","beforeInstallPromptHandler","event","preventDefault","updateValue","addEventListener","ngOnDestroy","removeEventListener","prompt","userChoice","showInfo","userAgent","navigator","toLowerCase","test","IOS","isStandalone","matchMedia","matches","isIOSStandalone","isFullscreen","innerHeight","screen","height","PwaService","SnackbarService","Platform","AppInstallPromptComponent_Template","AppInstallPromptComponent_Conditional_0_Template","AppInstallPromptComponent_Conditional_2_Template","ɵɵconditional","ɵɵpipeBind1","i4","AsyncPipe","inject","MAT_DIALOG_DATA","MatDialogModule","MatDialogRef","MatFormFieldModule","MatInputModule","MatButtonModule","FormBuilder","ReactiveFormsModule","Validators","CategoryDialogComponent","dialogTitle","data","dialogRef","fb","initForm","mode","onCancel","close","onSubmit","categoryForm","valid","id","category","getRawValue","group","categoryName","required","CategoryDialogComponent_Template","CategoryDialogComponent_Template_form_ngSubmit_2_listener","CategoryDialogComponent_mat_error_8_Template","CategoryDialogComponent_Template_button_click_10_listener","tmp_2_0","get","hasError","invalid","ɵɵtextInterpolate1","MatDialogTitle","MatDialogActions","MatDialogContent","MatFormField","MatLabel","MatError","MatInput","i5","i6","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","effect","signal","MatTableDataSource","MatTableModule","MatCheckboxModule","MatDialog","MatTooltipModule","SelectionModel","ConfirmationService","MatSort","MatSortModule","Subject","takeUntil","CategoryService","SearchTableService","CategoryListComponent_th_19_Template_mat_checkbox_change_1_listener","$event","toggleAllRows","selection","hasValue","isAllSelected","CategoryListComponent_td_20_Template_mat_checkbox_change_1_listener","row_r4","$implicit","toggle","CategoryListComponent_td_20_Template_mat_checkbox_click_1_listener","stopPropagation","isSelected","category_r5","category_r6","CategoryListComponent_td_29_Template_button_click_1_listener","category_r8","_r7","openEditDialog","CategoryListComponent_td_29_Template_button_click_4_listener","deleteCategory","searchQuery","dataSource","displayedColumns","ENTITY_TYPE","destroy$","categoryService","dialog","snackBarService","confirmationService","searchTableService","updateTable","categoryes","configureDataSource","setupSearch","ngAfterViewInit","configureSort","next","complete","destroySearch","sort","sortingDataAccessor","sortHeaderId","value","getSearchObservable","pipe","subscribe","searchValue","set","filter","trim","filterPredicate","searchStr","toString","numSelected","selected","length","numRows","clear","select","openAddDialog","open","width","afterClosed","result","createCategory","showSuccess","update","updateCategory","confirmDeletion","confirmed","deleteSelectedCategories","selectedIds","map","showError","confirmBulkDeletion","deleteManyCategory","onSearch","target","updateSearchQuery","categories","viewQuery","CategoryListComponent_Query","CategoryListComponent_Template_input_input_8_listener","CategoryListComponent_Template_button_click_9_listener","CategoryListComponent_Template_button_click_12_listener","ɵɵelementContainerStart","CategoryListComponent_th_19_Template","CategoryListComponent_td_20_Template","CategoryListComponent_th_22_Template","CategoryListComponent_td_23_Template","CategoryListComponent_th_25_Template","CategoryListComponent_td_26_Template","CategoryListComponent_th_28_Template","CategoryListComponent_td_29_Template","CategoryListComponent_tr_30_Template","CategoryListComponent_tr_31_Template","CategoryListComponent_tr_32_Template","CategoryListComponent_div_33_Template","filteredData","MatTable","MatHeaderCellDef","MatHeaderRowDef","MatColumnDef","MatCellDef","MatRowDef","MatHeaderCell","MatCell","MatHeaderRow","MatRow","MatCheckbox","MatIcon","MatIconButton","MatMiniFabButton","MatToolbar","i7","MatTooltip","i8","MatSortHeader","computed","HttpClient","http","baseUrl","categoryList","loadAllCategory","getCategoryById","find","post","newCategory","list","categoryUpdate","patch","updatedCategory","delete","ids","body","factory","ɵfac","providedIn","ConfirmationDialogComponent","confirmButtonText","cancelButtonText","confirmButtonColor","onConfirm","ConfirmationDialogComponent_Template","ConfirmationDialogComponent_Template_button_click_5_listener","ConfirmationDialogComponent_Template_button_click_7_listener","message","ɵɵsanitizeHtml","disableClose","itemName","count","itemType","FishDialogComponent","fishForm","fish","disabled","description","FishDialogComponent_Template","FishDialogComponent_Template_form_ngSubmit_2_listener","FishDialogComponent_mat_error_8_Template","FishDialogComponent_mat_error_13_Template","FishDialogComponent_Template_button_click_15_listener","tmp_3_0","FishService","FishListComponent_th_19_Template_mat_checkbox_change_1_listener","FishListComponent_td_20_Template_mat_checkbox_change_1_listener","FishListComponent_td_20_Template_mat_checkbox_click_1_listener","fish_r5","fish_r6","fish_r7","FishListComponent_td_32_Template_button_click_1_listener","fish_r9","_r8","FishListComponent_td_32_Template_button_click_4_listener","deleteFish","fishService","fishes","createFish","updateFish","deleteSelectedFishes","deleteManyFish","FishListComponent_Query","FishListComponent_Template_input_input_8_listener","FishListComponent_Template_button_click_9_listener","FishListComponent_Template_button_click_12_listener","FishListComponent_th_19_Template","FishListComponent_td_20_Template","FishListComponent_th_22_Template","FishListComponent_td_23_Template","FishListComponent_th_25_Template","FishListComponent_td_26_Template","FishListComponent_th_28_Template","FishListComponent_td_29_Template","FishListComponent_th_31_Template","FishListComponent_td_32_Template","FishListComponent_tr_33_Template","FishListComponent_tr_34_Template","FishListComponent_tr_35_Template","FishListComponent_div_36_Template","fishList","loadAllFish","getFishById","newFish","fishUpdate","updatedFish","NgOptimizedImage","router","authService","username","getFullname","navigateTo","page","navigate","logout","Router","AuthService","HomeComponent_Template","HomeComponent_Template_button_click_2_listener","HomeComponent_Template_button_click_4_listener","HomeComponent_Template_button_click_6_listener","MatProgressSpinnerModule","LoadingService","loadingService","LoadingIndicatorComponent_Template","LoadingIndicatorComponent_div_0_Template","loading","MatProgressSpinner","catchError","throwError","errorMessage","cdr","formBuilder","loginForm","password","onLogin","login","status","markForCheck","firstName","lastName","token","saveFullnameAndToken","ChangeDetectorRef","LoginComponent_Template","LoginComponent_Template_form_ngSubmit_6_listener","LoginComponent_span_18_Template","LoginComponent_span_19_Template","LoginComponent_div_20_Template","ɵɵpureFunction0","_c0","RouterLink","LogoutComponent_Template","passwordRequestForm","email","passwordRequest","PasswordRequestComponent_Template","PasswordRequestComponent_Template_form_ngSubmit_7_listener","route","mismatchedPassword","passwordResetForm","minLength","specialCharacterValidator","confirmPassword","valueChanges","paramMap","params","passwordReset","control","hasSpecialCharacter","noSpecialCharacter","ActivatedRoute","PasswordResetComponent_Template","PasswordResetComponent_Template_form_ngSubmit_7_listener","PasswordResetComponent_div_16_Template","PasswordResetComponent_div_17_Template","PasswordResetComponent_div_18_Template","errors","BehaviorSubject","FormControl","FormsModule","productService","size","searchTerm","showRelevantItems","showSixtySales","showWoh","showYield","showWithImages","originFilter","packSizeFilter","buyerFilter","minCompCost","minCompCostControl","uniqueOrigins","uniquePackSizes","uniqueBuyers","searchSubject","inventoryItemsSubject","inventoryItems$","asObservable","ProductService","ProductsComponent_Template","MatSidenavModule","MatListModule","MatExpansionModule","MatDividerModule","name_r2","sidebarOpened","toggleSidebar","state","SidebarLayoutComponent_Query","SidebarLayoutComponent_Template_button_click_2_listener","SidebarLayoutComponent_span_7_Template","RouterLinkActive","MatSidenav","MatSidenavContainer","MatSidenavContent","MatNavList","MatListItem","MatListItemIcon","MatDivider","MatListItemTitle","i9","MatAccordion","MatExpansionPanel","MatExpansionPanelHeader","MatExpansionPanelTitle","i10","isLoggedIn","ɵɵinject","finalize","AuthInterceptor","intercept","req","getToken","clonedRequest","clone","setHeaders","Authorization","setLoading","handle","tokenKey","fullnameKey","_firstName","asReadonly","fullname","localStorage","setItem","getItem","removeItem","HttpErrorResponse","GlobalErrorHandlerService","handleError","onLine","ErrorEvent","statusText","url","_loading","isLoading","HttpParams","getProducts","response","uploadProductImage","productId","file","formData","FormData","append","reportProgress","observe","deleteProductPhoto","debounceTime","distinctUntilChanged","searchSubjects","Map","entityType","debounceMs","has","query","subject","matSnackBar","duration","verticalPosition","horizontalPos","action","success","warning","info","showSnackBar","style","closeSnackBar","panelClass","undefined","snackBarRef","horizontalPosition","onAction","dismiss","MatSnackBar","production","MatSnackBarModule","MatMenuModule","MatSlideToggleModule","provideAnimations","bootstrapApplication","BrowserModule","ErrorHandler","importProvidersFrom","HTTP_INTERCEPTORS","provideHttpClient","withInterceptorsFromDi","provideServiceWorker","providers","provide","useClass","multi","enabled","registrationStrategy","err"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}